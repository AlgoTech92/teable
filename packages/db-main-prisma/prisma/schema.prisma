generator client {
  provider = "prisma-client-js"
  // output = "../src/generated"
}

datasource db {
  provider = "sqlite"
  url      = env("PRISMA_DATABASE_URL")
}

model TableMeta {
  id                String    @id
  name              String?
  description       String?
  icon              String?
  fields            Field[]
  views             View[]
  dbTableName       String    @map(name: "db_table_name")
  createdTime       DateTime  @default(now()) @map(name: "created_at")
  lastModifiedTime  DateTime  @updatedAt @map(name: "last_modified_at")
  deletedTime       DateTime? @map(name: "deleted_at")
  createdBy         String    @map(name: "created_by")
  lastModifiedBy    String    @map(name: "last_modified_by")

  @@map(name: "table_meta")
}

model Field {
  id                   String     @id
  name                 String?
  description          String?
  options              String?
  // field type enum, for user define
  type                 String?
  // for lookup field, it is a dynamic value
  calculatedType       String     @map(name: "calculated_type")
  // cellValue type enum (string, number, boolean, datetime, array)
  cellValueType        String     @map(name: "cell_value_type")
  // db field type (TEXT, INTEGER, REAL, BLOB)
  columnIndexes        String     @map(name: "column_indexs")
  dbType               String?    @map(name: "db_type")
  dbFieldName          String     @map(name: "db_field_name")
  defaultValue         String?    @map(name: "default_value")
  notNull              Boolean?   @map(name: "not_null")
  unique               Boolean?
  table                TableMeta  @relation(fields: [tableId], references: [id])
  tableId              String     @map(name: "table_id")

  createdTime          DateTime   @default(now()) @map(name: "created_time")
  lastModifiedTime     DateTime   @updatedAt @map(name: "last_modified_time")
  deletedTime          DateTime?  @map(name: "deleted_time")
  createdBy            String     @map(name: "created_by")
  lastModifiedBy       String     @map(name: "last_modified_by")

  @@map(name: "field")
}

model View {
  id                  String    @id
  name                String?
  description         String?
  meta                String?
  table               TableMeta @relation(fields: [tableId], references: [id])
  tableId             String    @map(name: "table_id")
  // view type enum, for user interface (grid, kanban, gantt, calendar, form, etc...)
  type                String
  sort                String?
  filter              String?
  group               String?
  options             String?

  createdTime         DateTime  @default(now()) @map(name: "created_time")
  lastModifiedTime    DateTime  @updatedAt @map(name: "last_modified_time")
  deletedTime         DateTime? @map(name: "deleted_time")
  createdBy           String    @map(name: "created_by")
  lastModifiedBy      String    @map(name: "last_modified_by")

  @@map(name: "view")
}

model User {
  id            Int       @id @default(autoincrement())
  firstName     String?   @map(name: "first_name")
  lastName      String?   @map(name: "last_name")
  nickname      String    @unique
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  avatarUrl     String?   @map("avatar_url")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]

  // Post Post[]
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("auth_accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("auth_verification_tokens")
}
