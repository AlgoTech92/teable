generator client {
  provider = "prisma-client-js"
  // output = "../src/generated"
}

datasource db {
  provider = "sqlite"
  url      = env("PRISMA_DATABASE_URL")
}

model TableMeta {
  id          String    @id
  name        String?
  description String?
  icon        String?
  fields      Field[]
  dbTableName String    @map(name: "db_table_name")
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")
  deletedAt   DateTime? @map(name: "deleted_at")
  createBy    String    @map(name: "create_by")
  updateBy    String    @map(name: "update_by")

  @@map(name: "table_meta")
}

model Field {
  id             String     @id
  name           String?
  description    String?
  options        String?
  // field type enum, for user define
  type           String?
  // for lookup field, it is a dynamic value
  calculatedType String?    @map(name: "calculated_type")
  // cellValue type enum (string, number, boolean, datetime, array)
  dataType       String?    @map(name: "data_type")
  // db field type (TEXT, INTEGER, REAL, BLOB)
  dbType         String?    @map(name: "db_type")
  dbFieldName    String     @map(name: "db_field_name")
  defaultValue   String?    @map(name: "default_value")
  notNull        Boolean?   @map(name: "not_null")
  unique         Boolean?
  table          TableMeta  @relation(fields: [tableId], references: [id])
  tableId        String     @map(name: "table_id")

  createdAt      DateTime   @default(now()) @map(name: "created_at")
  updatedAt      DateTime   @updatedAt @map(name: "updated_at")
  deletedAt      DateTime?  @map(name: "deleted_at")
  createBy       String     @map(name: "create_by")
  updateBy       String     @map(name: "update_by")

  @@map(name: "field")
}

model Poem {
  id        Int            @id @default(autoincrement())
  slug      String         @unique
  title     String
  content   String
  locale    String?
  keywords  PoemKeywords[]
  author    String
  link      String?
  image     String?
  createdAt DateTime       @default(now()) @map(name: "created_at")
  updatedAt DateTime       @updatedAt @map(name: "updated_at")

  @@map(name: "poem")
}

model PoemKeywords {
  id        Int      @id @default(autoincrement())
  poem      Poem     @relation(fields: [poemId], references: [id], onDelete: Cascade)
  poemId    Int      @map(name: "poem_id")
  keyword   Keyword  @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  keywordId Int      @map(name: "keyword_id")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@unique([poemId, keywordId])
  @@map(name: "poem_keywords")
}

model Keyword {
  id     Int            @id @default(autoincrement())
  name   String         @unique
  locale String?
  poems  PoemKeywords[]

  @@map(name: "keyword")
}

model Post {
  id          Int       @id @default(autoincrement())
  slug        String    @unique
  title       String
  content     String
  link        String?
  image       String?
  author      User?     @relation(fields: [authorId], references: [id])
  authorId    Int?      @map(name: "author_id")
  publishedAt DateTime? @map(name: "published_at")
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")

  @@map(name: "post")
}

model User {
  id            Int       @id @default(autoincrement())
  firstName     String?   @map(name: "first_name")
  lastName      String?   @map(name: "last_name")
  nickname      String    @unique
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  avatarUrl     String?   @map("avatar_url")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]

  Post Post[]
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("auth_accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("auth_verification_tokens")
}
