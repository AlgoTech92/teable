{
  "common": {
    "comingSoon": "Скоро будет доступно",
    "empty": "Пустой",
    "noRecords": "Не найдено ни одной записи",
    "unnamedRecord": "Неименованная запись",
    "untitled": "Без названия",
    "cancel": "Отменить",
    "confirm": "Подтвердить",
    "back": "Назад",
    "done": "Готово",
    "create": "Создать",
    "search": {
      "placeholder": "Поиск...",
      "empty": "Ничего не найдено"
    },
    "selectPlaceHolder": "Выбрать...",
    "loading": "Загрузка...",
    "loadMore": "Загрузить еще",
    "uploadFailed": "Загрузка не удалась",
    "rowCount": "{{count}} записей",
    "summary": "Загрузить еще",
    "summaryTip": "Подведите курсор для выбора резюме",
    "actions": "Действия"
  },
  "undoRedo": {
    "undo": "Undo",
    "redo": "Redo",
    "undoFailed": "Undo failed",
    "redoFailed": "Redo failed",
    "nothingToUndo": "Nothing to undo",
    "nothingToRedo": "Nothing to redo",
    "undoSucceed": "Undo succeed",
    "redoSucceed": "Redo succeed",
    "undoing": "undoing...",
    "redoing": "redoing..."
  },
  "editor": {
    "attachment": {
      "uploadDragOver": "Отпустить для загрузки файла",
      "uploadDragDefault": "Пасть или перетащить и отпустить для загрузки сюда"
    },
    "date": {
      "placeholder": "Выберите дату",
      "today": "Сегодня"
    },
    "formula": {
      "title": "Редактор формул",
      "guideSyntax": "Синтаксис",
      "guideExample": "Пример",
      "helperExample": "Пример: ",
      "fieldValue": "Возвращает значение в ячейки поля {{fieldName}}."
    },
    "link": {
      "placeholder": "Выберите записи для связывания",
      "searchPlaceholder": "Поиск записей",
      "create": "Добавить запись",
      "selectRecord": "Выбрать запись",
      "unselected": "Не выбрано",
      "selected": "Выбранные",
      "expandRecordError": "Нет разрешения на просмотр этой записи."
    },
    "user": {
      "searchPlaceholder": "Найти пользователей по имени",
      "notify": "Уведомить пользователей после их выбора"
    }
  },
  "filter": {
    "label": "Фильтр",
    "displayLabel": "Фильтровать по ",
    "displayLabel_other": "Фильтровать по {{fieldName}} и {{count}} другим полям",
    "addCondition": "Добавить условие",
    "addConditionGroup": "Добавить группу условий",
    "nestedLimitTip": "Условия фильтрации могут быть вложенными только на {{depth}} уровнях глубины",
    "linkInputPlaceholder": "Введите значение",
    "groupDescription": "Любой из следующих условия верно…",
    "currentUser": "Меня (текучего пользователя)",
    "tips": {
      "scope": "В этом представлении показать записи"
    },
    "invalidateSelected": "Недопустимое значение",
    "invalidateSelectedTips": "Выбранное значение было удалено, пожалуйста, выберите еще раз",
    "default": {
      "empty": "Не применено никаких условий фильтрации",
      "placeholder": "Введите значение"
    },
    "conjunction": {
      "and": "и",
      "or": "или",
      "where": "где"
    },
    "operator": {
      "is": "является",
      "isNot": "не является",
      "contains": "содержит",
      "doesNotContain": "не содержит",
      "isEmpty": "пусто",
      "isNotEmpty": "не пусто",
      "isGreater": "больше чем",
      "isGreaterEqual": "больше или равно",
      "isLess": "меньше чем",
      "isLessEqual": "меньше или равно",
      "isAnyOf": "является любым из",
      "isNoneOf": "не является любым из",
      "hasAnyOf": "имеет любой из",
      "hasAllOf": "имеет все из",
      "hasNoneOf": "не имеет ни одного из",
      "isExactly": "является ровно",
      "isWithIn": "находится в предела",
      "isBefore": "находится перед",
      "isAfter": "следует после",
      "isOnOrBefore": "на или до",
      "isOnOrAfter": "на или после",
      "number": {
        "is": "=",
        "isNot": "≠",
        "isGreater": ">",
        "isGreaterEqual": "≥",
        "isLess": "<",
        "isLessEqual": "≤"
      }
    },
    "component": {
      "date": {
        "today": "сегодня",
        "tomorrow": "завтра",
        "yesterday": "вчера",
        "oneWeekAgo": "неделю назад",
        "oneWeekFromNow": "через неделю",
        "oneMonthAgo": "месяц назад",
        "oneMonthFromNow": "через месяц",
        "daysAgo": "дни назад",
        "daysFromNow": "через дни",
        "exactDate": "точная дата",
        "pastWeek": "прошедшая неделя",
        "pastMonth": "прошедший месяц",
        "pastYear": "прошедший год",
        "nextWeek": "следующая неделя",
        "nextMonth": "следующий месяц",
        "nextYear": "следующий год",
        "pastNumberOfDays": "прошедшее количество дней",
        "nextNumberOfDays": "следующие количество дней"
      }
    }
  },
  "color": {
    "label": "цвет"
  },
  "rowHeight": {
    "short": "короткий",
    "medium": "средний",
    "tall": "высокий",
    "extraTall": "очень высокий"
  },
  "share": {
    "title": "поделиться"
  },
  "extensions": {
    "title": "расширения"
  },
  "hidden": {
    "label": "Скрытые поля",
    "configLabel_one": "{{count}} скрытое поле",
    "configLabel_other": "{{count}} скрытых полей",
    "showAll": "Показать все",
    "hideAll": "Скрыть все",
    "primaryKey": "Основное поле: используется для идентификации записей, нельзя скрыть или удалять"
  },
  "expandRecord": {
    "copy": "Копировать в буфер обмена",
    "copyRecordUrl": "Копировать URL записи",
    "deleteRecord": "Удалить запись",
    "recordHistory": {
      "hiddenRecordHistory": "Скрыть запись",
      "showRecordHistory": "Показать запись",
      "createdTime": "Время создания",
      "createdBy": "Создано кем",
      "before": "До",
      "after": "После",
      "viewRecord": "Просмотреть запись"
    }
  },
  "sort": {
    "label": "Сортировать",
    "displayLabel_one": "Сортировать по {{count}} полю",
    "displayLabel_other": "Сортировать по {{count}} полям",
    "setTips": "Сортировать по",
    "addButton": "Добавить еще один критерий сортировки",
    "autoSort": "Автоматически сортировать записи",
    "selectASCLabel": "первый → последний",
    "selectDESCLabel": "последний → первый"
  },
  "group": {
    "label": "Группировать",
    "displayLabel_one": "Группировать по {{count}} полям",
    "displayLabel_other": "Группировать по {{count}} полям",
    "setTips": "Группировать по",
    "addButton": "Добавить подгруппу"
  },
  "field": {
    "title": {
      "singleLineText": "Однострочный текст",
      "longText": "Длинный текст",
      "singleSelect": "Выбор одного",
      "number": "Число",
      "multipleSelect": "Выбор нескольких",
      "link": "Ссылка на другую запись",
      "formula": "Формула",
      "date": "Дата",
      "createdTime": "Время создания",
      "lastModifiedTime": "Время последнего изменения",
      "attachment": "Вложение",
      "checkbox": "Флажок",
      "rollup": "Сводная информация",
      "user": "Пользователь",
      "rating": "Рейтинг",
      "autoNumber": "Автоматическое нумерация",
      "lookup": "Поиск",
      "button": "Кнопка",
      "createdBy": "Создано автором",
      "lastModifiedBy": "Последнее изменение автором"
    }
  },
  "permission": {
    "actionDescription": {
      "spaceCreate": "Создать пространство",
      "spaceDelete": "Удалить пространство",
      "spaceRead": "Доступ к пространству",
      "spaceUpdate": "Обновлять пространство",
      "spaceInviteEmail": "Пригласить по электронной почте в пространство",
      "spaceInviteLink": "Пригласить по ссылке в пространстве",
      "spaceGrantRole": "Предоставить роль в пространстве",
      "baseCreate": "Создать базу",
      "baseDelete": "Удалить базу",
      "baseRead": "Читать базу данных",
      "baseUpdate": "Обновлять базу данных",
      "baseInviteEmail": "Пригласить по электронной почте на работу в системе/приложении, которая/которое использует базу данных",
      "baseInviteLink": "Пригласить по ссылке в систему/приложение, которое работает с базой данных",
      "baseTableImport": "Импортировать данные в базу данных",
      "baseTableExport": "Экспортировать данные из базы",
      "baseAuthorityMatrixConfig": "Настроить матрицу полномочий",
      "baseDbConnect": "Подключиться к базе данных",
      "tableCreate": "Создать таблицу",
      "tableRead": "Читать таблицу",
      "tableDelete": "Удалить таблицу",
      "tableUpdate": "Обновить таблицу",
      "tableImport": "Импортировать данные в таблицу",
      "tableExport": "экспортировать данные таблицы",
      "viewCreate": "Создать представление",
      "viewDelete": "Удалить представление",
      "viewRead": "Читать представление",
      "viewUpdate": "Обновить данные через представление",
      "fieldCreate": "Создать поле",
      "fieldDelete": "Удалить поле",
      "fieldRead": "Прочитать поле",
      "fieldUpdate": "Обновить поле",
      "recordCreate": "Создать запись",
      "recordComment": "Комментировать запись",
      "recordDelete": "Удалить запись",
      "recordRead": "Прочитать запись",
      "recordUpdate": "Обновить запись",
      "automationCreate": "Создать автоматизацию",
      "automationDelete": "Удалить автоматизацию",
      "automationRead": "Автоматизация чтения",
      "automationUpdate": "Автоматизация обновления",
      "userEmailRead": "Читать электронную почту пользователя",
      "recordHistoryRead": "Читать историю записи",
      "baseQuery": "Запросить базу данных"
    }
  },
  "noun": {
    "table": "Таблица",
    "view": "Представление",
    "space": "Рабочее пространство",
    "base": "База данных",
    "field": "Поле",
    "record": "Запись",
    "automation": "Автоматизация",
    "user": "Пользователь",
    "recordHistory": "История записей",
    "you": "You"
  },
  "formula": {
    "SUM": {
      "summary": "Сумма чисел. Эквивалент number1 + number2 + ...",
      "example": "SUM(100, 200, 300) => 600"
    },
    "AVERAGE": {
      "summary": "Возвращает среднее арифметическое чисел.",
      "example": "AVERAGE(100, 200, 300) => 200"
    },
    "MAX": {
      "summary": "Возвращает максимальное значение из данных чисел.",
      "example": "MAX(100, 200, 300) => 300"
    },
    "MIN": {
      "summary": "Возвращает минимальное значение из данных чисел.",
      "example": "MIN(100, 200, 300) => 100"
    },
    "ROUND": {
      "summary": "Округляет значение до количества заданных десятичных мест, определяемых параметром \"precision\" (В частности, ROUND округляет до ближайшего целого числа с указанной точностью, при равных значениях округляя половину в сторону положительного бесконечности.)",
      "example": "ROUND(1.99, 0) => 2\nROUND(16.8, -1) => 20"
    },
    "ROUNDUP": {
      "summary": "Округляет значение до количества заданных десятичных мест, определяемых параметром \"precision\", всегда округляя вверх, т.е. от нуля. (Вы должны указать значение для точности, иначе функция не будет работать.)",
      "example": "ROUNDUP(1.1, 0) => 2\nROUNDUP(-1.1, 0) => -2"
    },
    "ROUNDDOWN": {
      "summary": "Округляет значение до количества заданных десятичных мест, определяемых параметром \"precision\", всегда округляя вниз, т.е. к нулю. (Вы должны указать значение для точности, иначе функция не будет работать.)",
      "example": "ROUNDDOWN(1.9, 0) => 1\nROUNDDOWN(-1.9, 0) => -1"
    },
    "CEILING": {
      "summary": "Возвращает ближайшее целое кратное значения \"значимости\", которое больше или равно исходному значению. Если значение \"значимости\" не предоставлено, то предполагается значение 1.",
      "example": "CEILING(2.49) => 3\nCEILING(2.49, 1) => 2.5\nCEILING(2.49, -1) => 10"
    },
    "FLOOR": {
      "summary": "Возвращает ближайшее целое кратное значения \"значимости\", которое меньше или равно исходному значению. Если значение \"значимости\" не предоставлено, то предполагается значение 1.",
      "example": "FLOOR(2.49) => 2\nFLOOR(2.49, 1) => 2.4\nFLOOR(2.49, -1) => 0"
    },
    "EVEN": {
      "summary": "Возвращает наименьшее четное целое число, которое больше или равно указанному значению.",
      "example": "EVEN(0.1) => 2\nEVEN(-0.1) => -2"
    },
    "ODD": {
      "summary": "Округляет положительное значение вверх до ближайшего нечетного числа, а отрицательное значение вниз до ближайшего нечетного числа.",
      "example": "ODD(0.1) => 1\nODD(-0.1) => -1"
    },
    "INT": {
      "summary": "Если логический аргумент истинный, возвращает number1, в противном случае возвращает number2. Также можно использовать для создания вложенных IF-заявлений.\nТакже можно использовать для проверки, пуста ли ячейка/есть ли в ней значение.",
      "example": "INT(1.9) => 1\nINT(-1.9) => -2"
    },
    "ABS": {
      "summary": "Возвращает абсолютное значение.",
      "example": "ABS(-1) => 1"
    },
    "SQRT": {
      "summary": "Возвращает квадратный корень неотрицательного числа.",
      "example": "SQRT(4) => 2"
    },
    "POWER": {
      "summary": "Вычисляет указанную основание в степени, равной заданному значению.",
      "example": "POWER(2) => 4"
    },
    "EXP": {
      "summary": "Вычисляет число Эйлера (e) в степени, равной заданному значению.",
      "example": "EXP(0) => 1\nEXP(1) => 2.718"
    },
    "LOG": {
      "summary": "Вычисляет логарифм значения в заданной основании. Если основа не указана, то по умолчанию используется 10.",
      "example": "LOG(100) => 2\nLOG(1024, 2) => 10"
    },
    "MOD": {
      "summary": "Возвращает остаток от деления первого аргумента на второй.",
      "example": "MOD(9, 2) => 1\nMOD(9, 3) => 0"
    },
    "VALUE": {
      "summary": "Преобразует текстовую строку в число.",
      "example": "VALUE(\"$1,000,000\") => 1000000"
    },
    "CONCATENATE": {
      "summary": "Объединяет различные аргументы типа значения в один текстовый значение.",
      "example": "CONCATENATE(\"Hello \", \"Teable\") => Hello Teable"
    },
    "FIND": {
      "summary": "Находит вхождение строки stringToFind в строке whereToSearch, начиная от необязательного позиции startFromPosition (по умолчанию startFromPosition равно 0). Если вхождение строки stringToFind не найдено, то результат будет 0.",
      "example": "FIND(\"Teable\", \"Hello Teable\") => 7\nFIND(\"Teable\", \"Hello Teable\", 5) => 7\nFIND(\"Teable\", \"Hello Teable\", 10) => 0"
    },
    "SEARCH": {
      "summary": "Ищет вхождение строки stringToFind в строке whereToSearch, начиная от необязательного позиции startFromPosition (по умолчанию startFromPosition равно 0). Если вхождение строки stringToFind не найдено, то результат будет пустой.\n\nЭто похоже на функцию FIND(), хотя если вхождение stringToFind не найдено, FIND() возвращает 0, а не пустое значение.",
      "example": "SEARCH(\"Teable\", \"Hello Teable\") => 7\nSEARCH(\"Teable\", \"Hello Teable\", 5) => 7\nSEARCH(\"Teable\", \"Hello Teable\", 10) => \"\""
    },
    "MID": {
      "summary": "Извлечь строку счисления, начинающуюся с where tostart.",
      "example": "MID(\"Hello Teable\", 6, 6) => \"Teable\""
    },
    "LEFT": {
      "summary": "Извлечь символ howmany из начала строки.",
      "example": "LEFT(\"2023-09-06\", 4) => \"2023\""
    },
    "RIGHT": {
      "summary": "Сколько символов извлекается из конца строки.",
      "example": "RIGHT(\"2023-09-06\", 5) => \"09-06\""
    },
    "REPLACE": {
      "summary": "Заменить текст символом, начинающимся с начального символа.\n(Если вы ищете способ найти все появляющиеся Old text и заменить их новостями text, см. статью SUBSTITUTE ().)",
      "example": "REPLACE(\"Hello Table\", 7, 5, \"Teable\") => \"Hello Teable\""
    },
    "REGEXP_REPLACE": {
      "summary": "Заменить все строки, соответствующие регулярному выражению, на replace.",
      "example": "REGEXP_REPLACE(\"Hello Table\", \"H.* \", \"\") => \"Teable\""
    },
    "SUBSTITUTE": {
      "summary": "Заменить существующий Old text новым text.\nВы можете указать кавычки (начиная с 1) для замены конкретного появления old text. Если кавычки не указаны, все появляющиеся Old text будут заменены.",
      "example": "SUBSTITUTE(\"Hello Table\", \"Table\", \"Teable\") => \"Hello Teable\""
    },
    "LOWER": {
      "summary": "Приводит строку к нижнему регистру.",
      "example": "LOWER(\"Hello Teable\") => \"hello teable\""
    },
    "UPPER": {
      "summary": "Приводит строку к верхнему регистру.",
      "example": "UPPER(\"Hello Teable\") => \"HELLO TEABLE\""
    },
    "REPT": {
      "summary": "Повторяет строку указанное количество раз.",
      "example": "REPT(\"Hello!\") => \"Hello!Hello!Hello!\""
    },
    "TRIM": {
      "summary": "Удаляет пробелы в начале и в конце строки.",
      "example": "TRIM(\" Hello \") => \"Hello\""
    },
    "LEN": {
      "summary": "Извлекает {{howMany}} символов с начала строки.",
      "example": "LEN(\"Hello\") => 5"
    },
    "T": {
      "summary": "Возвращает аргумент, если это текст, иначе возвращает пустое значение.",
      "example": "T(\"Hello\") => \"Hello\"\nT(100) => null"
    },
    "ENCODE_URL_COMPONENT": {
      "summary": "Заменяет определённые символы на закодированные эквиваленты для использования в создании URL или URI. Не кодирует следующие символы: - _. ~",
      "example": "ENCODE_URL_COMPONENT(\"Hello Teable\") => \"Hello%20Teable\""
    },
    "IF": {
      "summary": "Возвращает значение value1, если логическое выражение истинно, в противном случае возвращает значение value2. Также можно использовать для создания вложенных операторов IF. Можно также использовать для проверки, пустая ли ячейка.",
      "example": "IF(2 > 1, \"A\", \"B\") => \"A\"\nIF(2 > 1, TRUE, FALSE) => TRUE"
    },
    "SWITCH": {
      "summary": "Принимает выражение, список возможных значений для этого выражения и соответствующее значение для каждого из них. Также можно задать значение по умолчанию, если введённое выражение не соответствует ни одному из определённых шаблонов. В многих случаях функцию SWITCH() можно использовать вместо вложенной формулы IF().",
      "example": "SWITCH(\"B\", \"A\", \"Value A\", \"B\", \"Value B\", \"Default Value\") => \"Value B\""
    },
    "AND": {
      "summary": "Возвращает true, если все аргументы истинны, иначе возвращает false.",
      "example": "AND(1 < 2, 5 > 3) => true\nAND(1 < 2, 5 < 3) => false"
    },
    "OR": {
      "summary": "Возвращает true, если хотя бы один из аргументов иссинён, иначе возвращает false.",
      "example": "OR(1 < 2, 5 < 3) => true\nOR(1 > 2, 5 < 3) => false"
    },
    "XOR": {
      "summary": "Возвращает true, если нечетное количество аргументов истинно, иначе возвращает false.",
      "example": "XOR(1 < 2, 5 < 3, 8 < 10) => false\nXOR(1 > 2, 5 < 3, 8 < 10) => true"
    },
    "NOT": {
      "summary": "Обращает логическое значение аргумента.",
      "example": "NOT(1 < 2) => false\nNOT(1 > 2) => true"
    },
    "BLANK": {
      "summary": "Возвращает пустое значение.",
      "example": "BLANK() => null\nIF(2 > 3, \"Yes\", BLANK()) => null"
    },
    "ERROR": {
      "summary": "Возвращает значение ошибки.",
      "example": "IF(2 > 3, \"Yes\", ERROR(\"Calculation\")) => \"#ERROR: Calculation\""
    },
    "IS_ERROR": {
      "summary": "Возвращает true, если выражение вызывает ошибку, иначе возвращает false.",
      "example": "IS_ERROR(ERROR()) => true"
    },
    "TODAY": {
      "summary": "Возвращает текущую дату.",
      "example": "TODAY() => \"2023-09-08 00:00\""
    },
    "NOW": {
      "summary": "Возвращает текучую дату и время.",
      "example": "NOW() => \"2023-09-08 16:50\""
    },
    "YEAR": {
      "summary": "Возвращает четырехзначное годовое значение даты и времени.",
      "example": "YEAR(\"2023-09-08\") => 2023"
    },
    "MONTH": {
      "summary": "Возвращает месяц даты и времени в виде числа от 1 (январь) до 12 (декабрь).",
      "example": "MONTH(\"2023-09-08\") => 9"
    },
    "WEEKNUM": {
      "summary": "Возвращает номер недели в году.",
      "example": "WEEKNUM(\"2023-09-08\") => 36"
    },
    "WEEKDAY": {
      "summary": "Возвращает день недели в виде целого числа от 0 до 6 включительно. Опционально можно указать второй аргумент (\"Воскресенье\" или \"Понедельник\"), чтобы недели начинались с этого дня. Если опущен, недели по умолчанию начинаются с воскресенья. Пример:\nWEEKDAY(TODAY(), \"Monday\")",
      "example": "WEEKNUM(\"2023-09-08\") => 5"
    },
    "DAY": {
      "summary": "Возвращает день месяца даты и времени в виде числа от 1 до 31.",
      "example": "DAY(\"2023-09-08\") => 8"
    },
    "HOUR": {
      "summary": "Возвращает час даты и времени в виде числа от 0 (полночь) до 23 (23:00).",
      "example": "HOUR(\"2023-09-08 16:50\") => 16"
    },
    "MINUTE": {
      "summary": "Возвращает минуту даты и времени в виде целого числа от 0 до 59.",
      "example": "MINUTE(\"2023-09-08 16:50\") => 50"
    },
    "SECOND": {
      "summary": "Возвращает минуту даты и времени в виде целого числа от 0 до 59.",
      "example": "SECOND(\"2023-09-08 16:50:30\") => 30"
    },
    "FROMNOW": {
      "summary": "Вычисляет количество дней между текучей датой и другой датой.",
      "example": "FROMNOW({Date}, \"day\") => 25"
    },
    "TONOW": {
      "summary": "Вычисляет разницу в количестве дней между текучей датой и другой датой.",
      "example": "TONOW({Date}, \"day\") => 25"
    },
    "DATETIME_DIFF": {
      "summary": "Возвращает разницу между датами и временами в заданных единицах измерения. По умолчанию единицы измерения - секунды. (Список спецификаторов единиц измерения см. здесь.)\nРазница между датами и временами определяется путем вычитания [date2] из [date1]. Это означает, что если [date2] позже, чем [date1], то результирующее значение будет отрицательным.",
      "example": "DATETIME_DIFF(\"2022-08-01\", \"2023-09-08\", \"day\") => 403"
    },
    "WORKDAY": {
      "summary": "Возвращает рабочий день, начиная от даты начала, исключая указанные праздничные дни",
      "example": "WORKDAY(\"2023-09-08\", 200) => \"2024-06-14 00:00:00\"\nWORKDAY(\"2023-09-08\", 200, \"2024-01-22, 2024-01-23, 2024-01-24, 2024-01-25\") => \"2024-06-20 00:00:00\""
    },
    "WORKDAY_DIFF": {
      "summary": "Возвращает количество рабочих дней между date1 и date2. Рабочие дни не включают выходные и, по желанию, список праздничных дней, отформатированный в виде строки с датами в формате ISO, разделенных запятыми.",
      "example": "WORKDAY_DIFF(\"2023-06-18\", \"2023-10-01\") => 75\nWORKDAY(\"2023-06-18\", \"2023-10-01\", \"2023-07-12, 2023-08-18, 2023-08-19\") => 73"
    },
    "IS_SAME": {
      "summary": "Сравнивает две даты до указанной единицы и определяет, являются ли они идентичными. Возвращает true, если даты идентичны, и false, если нет.",
      "example": "IS_SAME(\"2023-09-08\", \"2023-09-10\") => false\nIS_SAME(\"2023-09-08\", \"2023-09-10\", \"month\") => true"
    },
    "IS_AFTER": {
      "summary": "Определяет, является ли date1 позднее, чем date2. Возвращает true, если дата позднее, и false, если нет.",
      "example": "IS_AFTER(\"2023-09-10\", \"2023-09-08\") => true\nIS_AFTER(\"2023-09-10\", \"2023-09-08\", \"month\") => false"
    },
    "IS_BEFORE": {
      "summary": "Определяет, является ли date1 раньше, чем date2. Возвращает true, если дата раньше, и false, если нет.",
      "example": "IS_BEFORE(\"2023-09-08\", \"2023-09-10\") => true\nIS_BEFORE(\"2023-09-08\", \"2023-09-10\", \"month\") => false"
    },
    "DATE_ADD": {
      "summary": "Добавляет заданное количество \"count\" единиц к дате и времени.",
      "example": "DATE_ADD(\"2023-09-08 18:00:00\", 10, \"day\") => \"2023-09-18 18:00:00\""
    },
    "DATESTR": {
      "summary": "Преобразует дату и время в строку (ГГГГ-ММ-ДД).",
      "example": "DATESTR(\"2023/09/08\") => \"2023-09-08\""
    },
    "TIMESTR": {
      "summary": "Форматирует дату и время в строку, содержащую только время (ЧЧ:мм:сс).",
      "example": "DATESTR(\"2023/09/08 16:50:30\") => \"16:50:30\""
    },
    "DATETIME_FORMAT": {
      "summary": "Форматирует дату и время в указанную строку. Для объяснения, как использовать эту функцию с полями даты, нажмите здесь. Для списка поддерживаемых спецификаторов формата, пожалуйста, нажмите здесь.",
      "example": "DATETIME_FORMAT(\"2023-09-08\", \"DD-MM-YYYY\") => \"08-09-2023\""
    },
    "DATETIME_PARSE": {
      "summary": "Интерпретирует текстовую строку как структурированную дату с дополнительными параметрами ввода, такими как формат и региональные настройки. Выходной формат всегда будет \"M/D/YYYY h:mm a\".",
      "example": "DATETIME_PARSE(\"8 Sep 2023 18:00\", \"D MMM YYYY HH:mm\") => \"2023-09-08 18:00:00\""
    },
    "CREATED_TIME": {
      "summary": "Возвращает время создания текущей записи.",
      "example": "CREATED_TIME() => \"2023-09-08 18:00:00\""
    },
    "LAST_MODIFIED_TIME": {
      "summary": "Возвращает дату и время последнего изменения, сделанного пользователем в не вычисляемом поле таблицы.",
      "example": "LAST_MODIFIED_TIME() => \"2023-09-08 18:00:00\""
    },
    "COUNTALL": {
      "summary": "Возвращает количество всех элементов, включая текст и пустые значения.",
      "example": "COUNTALL(100, 200, \"\", \"Teable\", TRUE()) => 5"
    },
    "COUNTA": {
      "summary": "Возвращает количество непустых значений. Эта функция учитывает как числовые, так и текстовые значения.",
      "example": "COUNTA(100, 200, 300, \"\", \"Teable\", TRUE) => 4"
    },
    "COUNT": {
      "summary": "Возвращает количество числовых элементов.",
      "example": "COUNT(100, 200, 300, \"\", \"Teable\", TRUE) => 3"
    },
    "ARRAY_JOIN": {
      "summary": "Объединяет массив элементов сводной таблицы в строку с разделителем.",
      "example": "ARRAY_JOIN([\"Tom\", \"Jerry\", \"Mike\"], \"; \") => \"Tom; Jerry; Mike\""
    },
    "ARRAY_UNIQUE": {
      "summary": "Возвращает только уникальные элементы в массиве.",
      "example": "ARRAY_UNIQUE([1, 2, 3, 2, 1]) => [1, 2, 3]"
    },
    "ARRAY_FLATTEN": {
      "summary": "Уплощает массив, удаляя любое вложение массивов. Все элементы становятся частью одного массива.",
      "example": "ARRAY_FLATTEN([1, 2, \" \", 3, true], [\"ABC\"]) => [1, 2, 3, \" \", true, \"ABC\"]"
    },
    "ARRAY_COMPACT": {
      "summary": "Удаляет пустые строки и значения null из массива. Сохраняет значения false и строки, содержащие один или несколько пробелов.",
      "example": "ARRAY_COMPACT([1, 2, 3, \"\", null, \"ABC\"]) => [1, 2, 3, \"ABC\"]"
    },
    "TEXT_ALL": {
      "summary": "Возвращает все текстовые значения",
      "example": "TEXT_ALL(\"t\") => t"
    },
    "RECORD_ID": {
      "summary": "Возвращает идентификатор текущей записи.",
      "example": "RECORD_ID() => \"recxxxxxx\""
    },
    "AUTO_NUMBER": {
      "summary": "Возвращает уникальные и последовательно увеличивающиеся номера для каждой записи.",
      "example": "AUTO_NUMBER() => 1"
    },
    "FORMULA": {
      "summary": "Заполните переменные, операционные знаки и функции для формирования формул для вычислений.",
      "example": "Цитирование столбца: {Название поля}\n\nИспользование оператора: 100 * 2 + 300\n\nИспользование функции: SUM({Числовое поле 1}, 100)\n\nИспользование оператора IF:\nIF(логическое условие, \"значение 1\", \"значение 2\")"
    }
  },
  "functionType": {
    "fields": "Поля",
    "numeric": "Числовой",
    "text": "Текстовый",
    "logical": "Логический",
    "date": "Дата",
    "array": "Массив",
    "system": "Системный"
  },
  "statisticFunc": {
    "none": "Нет",
    "empty": "Пустой",
    "filled": "Заполненный",
    "unique": "Уникальный",
    "max": "Макс",
    "min": "Мин",
    "sum": "Сум",
    "average": "Среднее",
    "checked": "Отмечено",
    "unChecked": "Не отмечено",
    "percentEmpty": "Процент пустых",
    "percentFilled": "Заполненность в процентах",
    "percentUnique": "Уникальность в процентах",
    "percentChecked": "Проверенность в процентах",
    "percentUnChecked": "Непроверенность в процентах",
    "earliestDate": "Самая ранняя дата",
    "latestDate": "Самая поздняя дата",
    "dateRangeOfDays": "Диапазон дат (в днях)",
    "dateRangeOfMonths": "Диапазон дат (в месяцах)",
    "totalAttachmentSize": "Общий размер вложений"
  },
  "baseQuery": {
    "add": "Добавить",
    "error": {
      "invalidCol": "Неверная колонка, попробуйте выбрать заново",
      "invalidCols": "Неверные колонки: {{colNames}}",
      "invalidTable": "Неверная таблица, попробуйте выбрать заново",
      "requiredSelect": "Вы должны выбрать один"
    },
    "from": {
      "title": "Из",
      "fromTable": "Выберите таблицу",
      "fromQuery": "Из запроса"
    },
    "select": {
      "title": "Выберите"
    },
    "where": {
      "title": "Где"
    },
    "groupBy": {
      "title": "ГРУППИРОВАТЬ ПО"
    },
    "orderBy": {
      "title": "СОРТИРОВАТЬ ПО",
      "asc": "ПО ВОЗРАСТАНИЮ",
      "desc": "ПО УБЫВАНИЮ"
    },
    "limit": {
      "title": "ОГРАНИЧИТЬ КОЛИЧЕСТВО"
    },
    "offset": {
      "title": "Пропустить ПЕРВЫЕ {N} СТРОК"
    },
    "join": {
      "title": "Соединить",
      "joinType": "Тип соединения",
      "leftJoin": "Левое соединение",
      "rightJoin": "Правое соединение",
      "innerJoin": "Внутреннее соединение",
      "fullJoin": "Полное соединение",
      "data": "От"
    },
    "aggregation": {
      "title": "Агрегирование"
    }
  }
}
