{
  "common": {
    "comingSoon": "Скоро будет доступно",
    "empty": "Пустой",
    "noRecords": "Не найдено ни одной записи",
    "unnamedRecord": "Неименованная запись",
    "untitled": "Без названия",
    "cancel": "Отменить",
    "confirm": "Подтвердить",
    "back": "Назад",
    "done": "Готово",
    "create": "Создать",
    "search": {
      "placeholder": "Поиск...",
      "empty": "Ничего не найдено"
    },
    "selectPlaceHolder": "Выбрать...",
    "loading": "Загрузка...",
    "loadMore": "Загрузить еще",
    "uploadFailed": "Загрузка не удалась",
    "rowCount": "{{count}} записей",
    "summary": "Загрузить еще",
    "summaryTip": "Подведите курсор для выбора резюме",
    "actions": "Действия"
  },
  "editor": {
    "attachment": {
      "uploadDragOver": "Отпустить для загрузки файла",
      "uploadDragDefault": "Пасть или перетащить и отпустить для загрузки сюда"
    },
    "date": {
      "placeholder": "Выберите дату",
      "today": "Сегодня"
    },
    "formula": {
      "title": "Редактор формул",
      "guideSyntax": "Синтаксис",
      "guideExample": "Пример",
      "helperExample": "Пример: ",
      "fieldValue": "Возвращает значение в ячейки поля {{fieldName}}."
    },
    "link": {
      "placeholder": "Выберите записи для связывания",
      "searchPlaceholder": "Поиск записей",
      "create": "Добавить запись",
      "selectRecord": "Выбрать запись",
      "unselected": "Не выбрано",
      "selected": "Выбранные",
      "expandRecordError": "Нет разрешения на просмотр этой записи."
    },
    "user": {
      "searchPlaceholder": "Найти пользователей по имени",
      "notify": "Notify users once they're selected"
    }
  },
  "filter": {
    "label": "Фильтр",
    "displayLabel": "Фильтровать по ",
    "displayLabel_other": "Фильтровать по {{fieldName}} и {{count}} другим полям",
    "addCondition": "Добавить условие",
    "addConditionGroup": "Добавить группу условий",
    "nestedLimitTip": "Условия фильтрации могут быть вложенными только на 3 уровня",
    "linkInputPlaceholder": "Введите значение",
    "groupDescription": "Любой из следующих условия верно…",
    "currentUser": "Меня (текучего пользователя)",
    "tips": {
      "scope": "В этом представлении показать записи"
    },
    "default": {
      "empty": "Не применено никаких условий фильтрации",
      "placeholder": "Введите значение"
    },
    "conjunction": {
      "and": "и",
      "or": "или",
      "where": "где"
    },
    "operator": {
      "is": "является",
      "isNot": "не является",
      "contains": "содержит",
      "doesNotContain": "не содержит",
      "isEmpty": "пусто",
      "isNotEmpty": "не пусто",
      "isGreater": "больше чем",
      "isGreaterEqual": "больше или равно",
      "isLess": "меньше чем",
      "isLessEqual": "меньше или равно",
      "isAnyOf": "является любым из",
      "isNoneOf": "не является любым из",
      "hasAnyOf": "имеет любой из",
      "hasAllOf": "имеет все из",
      "hasNoneOf": "не имеет ни одного из",
      "isExactly": "является ровно",
      "isWithIn": "находится в предела",
      "isBefore": "находится перед",
      "isAfter": "следует после",
      "isOnOrBefore": "на или до",
      "isOnOrAfter": "на или после",
      "number": {
        "is": "=",
        "isNot": "≠",
        "isGreater": ">",
        "isGreaterEqual": "≥",
        "isLess": "<",
        "isLessEqual": "≤"
      }
    },
    "component": {
      "date": {
        "today": "сегодня",
        "tomorrow": "завтра",
        "yesterday": "вчера",
        "oneWeekAgo": "неделю назад",
        "oneWeekFromNow": "через неделю",
        "oneMonthAgo": "месяц назад",
        "oneMonthFromNow": "через месяц",
        "daysAgo": "дни назад",
        "daysFromNow": "через дни",
        "exactDate": "точная дата",
        "pastWeek": "прошедшая неделя",
        "pastMonth": "прошедший месяц",
        "pastYear": "прошедший год",
        "nextWeek": "следующая неделя",
        "nextMonth": "следующий месяц",
        "nextYear": "следующий год",
        "pastNumberOfDays": "прошедшее количество дней",
        "nextNumberOfDays": "следующие количество дней"
      }
    }
  },
  "color": {
    "label": "цвет"
  },
  "rowHeight": {
    "short": "короткий",
    "medium": "средний",
    "tall": "высокий",
    "extraTall": "очень высокий"
  },
  "share": {
    "title": "поделиться"
  },
  "extensions": {
    "title": "расширения"
  },
  "hidden": {
    "label": "Скрытые поля",
    "configLabel_one": "{{count}} скрытое поле",
    "configLabel_other": "{{count}} скрытых полей",
    "showAll": "Показать все",
    "hideAll": "Скрыть все",
    "primaryKey": "Основное поле: используется для идентификации записей, нельзя скрыть или удалять"
  },
  "expandRecord": {
    "copy": "Копировать в буфер обмена",
    "copyRecordUrl": "Копировать URL записи",
    "recordHistory": {
      "hiddenRecordHistory": "Скрыть запись",
      "showRecordHistory": "Показать запись",
      "createdTime": "Время создания",
      "createdBy": "Создано кем",
      "before": "До",
      "after": "После",
      "viewRecord": "Просмотреть запись"
    }
  },
  "sort": {
    "label": "Сортировать",
    "displayLabel_one": "Сортировать по {{count}} полю",
    "displayLabel_other": "Сортировать по {{count}} полям",
    "setTips": "Сортировать по",
    "addButton": "Добавить еще один критерий сортировки",
    "autoSort": "Автоматически сортировать записи"
  },
  "group": {
    "label": "Группировать",
    "displayLabel_one": "Группировать по {{count}} полям",
    "displayLabel_other": "Группировать по {{count}} полям",
    "setTips": "Группировать по",
    "addButton": "Добавить подгруппу"
  },
  "field": {
    "title": {
      "singleLineText": "Однострочный текст",
      "longText": "Длинный текст",
      "singleSelect": "Выбор одного",
      "number": "Число",
      "multipleSelect": "Выбор нескольких",
      "link": "Link to another record",
      "formula": "Формула",
      "date": "Дата",
      "createdTime": "Время создания",
      "lastModifiedTime": "Время последнего изменения",
      "attachment": "Вложение",
      "checkbox": "Флажок",
      "rollup": "Сводная информация",
      "user": "Пользователь",
      "rating": "Рейтинг",
      "autoNumber": "Автоматическое нумерация",
      "lookup": "Lookup",
      "button": "Кнопка",
      "createdBy": "Created by",
      "lastModifiedBy": "Last modified by"
    }
  },
  "spaceRole": {
    "role": {
      "owner": "Владелец",
      "creator": "Создатель",
      "editor": "Редактор",
      "commenter": "Комментатор",
      "viewer": "Просмотрщик"
    },
    "description": {
      "owner": "Может полностью настраивать и редактировать базы данных, автоматизацию, матрицы полномочий, а также управлять настройками пространства и выставление счетов",
      "creator": "Может полностью настраивать и редактировать базы данных и автоматизацию, а также включать матрицу полномочий",
      "editor": "Может редактировать записи и представления, но не может настраивать таблицы или поля",
      "commenter": "Может комментировать записи",
      "viewer": "Не может редактировать или комментировать"
    }
  },
  "permission": {
    "actionDescription": {
      "spaceCreate": "Создать пространство",
      "spaceDelete": "Удалить пространство",
      "spaceRead": "Доступ к пространству",
      "spaceUpdate": "Обновлять пространство",
      "spaceInviteEmail": "Пригласить по электронной почте в пространство",
      "spaceInviteLink": "Пригласить по ссылке в пространстве",
      "spaceGrantRole": "Предоставить роль в пространстве",
      "baseCreate": "Создать базу",
      "baseDelete": "Удалить базу",
      "baseRead": "Читать базу данных",
      "baseUpdate": "Обновлять базу данных",
      "baseInviteEmail": "Пригласить по электронной почте на работу в системе/приложении, которая/которое использует базу данных",
      "baseInviteLink": "Пригласить по ссылке в систему/приложение, которое работает с базой данных",
      "baseTableImport": "Импортировать данные в базу данных",
      "baseTableExport": "Экспортировать данные из базы",
      "baseAuthorityMatrixConfig": "Настроить матрицу полномочий",
      "baseDbConnect": "Подключиться к базе данных",
      "tableCreate": "Создать таблицу",
      "tableRead": "Читать таблицу",
      "tableDelete": "Удалить таблицу",
      "tableUpdate": "Обновить таблицу",
      "tableImport": "Импортировать данные в таблицу",
      "tableExport": "экспортировать данные таблицы",
      "viewCreate": "Создать представление",
      "viewDelete": "Удалить представление",
      "viewRead": "Читать представление",
      "viewUpdate": "Обновить данные через представление",
      "fieldCreate": "Создать поле",
      "fieldDelete": "Удалить поле",
      "fieldRead": "Прочитать поле",
      "fieldUpdate": "Обновить поле",
      "recordCreate": "Создать запись",
      "recordComment": "Комментировать запись",
      "recordDelete": "Удалить запись",
      "recordRead": "Прочитать запись",
      "recordUpdate": "Обновить запись",
      "automationCreate": "Создать автоматизацию",
      "automationDelete": "Удалить автоматизацию",
      "automationRead": "Автоматизация чтения",
      "automationUpdate": "Автоматизация обновления",
      "userEmailRead": "Читать электронную почту пользователя",
      "recordHistoryRead": "Читать историю записи",
      "baseQuery": "Запросить базу данных"
    }
  },
  "noun": {
    "table": "Таблица",
    "view": "Представление",
    "space": "Рабочее пространство",
    "base": "База данных",
    "field": "Поле",
    "record": "Запись",
    "automation": "Автоматизация",
    "user": "Пользователь",
    "recordHistory": "История записей"
  },
  "formula": {
    "SUM": {
      "summary": "Сумма чисел. Эквивалент number1 + number2 + ...",
      "example": "SUM(100, 200, 300) => 600"
    },
    "AVERAGE": {
      "summary": "Возвращает среднее арифметическое чисел.",
      "example": "AVERAGE(100, 200, 300) => 200"
    },
    "MAX": {
      "summary": "Возвращает максимальное значение из данных чисел.",
      "example": "MAX(100, 200, 300) => 300"
    },
    "MIN": {
      "summary": "Возвращает минимальное значение из данных чисел.",
      "example": "MIN(100, 200, 300) => 100"
    },
    "ROUND": {
      "summary": "Округляет значение до количества заданных десятичных мест, определяемых параметром \"precision\" (В частности, ROUND округляет до ближайшего целого числа с указанной точностью, при равных значениях округляя половину в сторону положительного бесконечности.)",
      "example": "ROUND(1.99, 0) => 2\nROUND(16.8, -1) => 20"
    },
    "ROUNDUP": {
      "summary": "Округляет значение до количества заданных десятичных мест, определяемых параметром \"precision\", всегда округляя вверх, т.е. от нуля. (Вы должны указать значение для точности, иначе функция не будет работать.)",
      "example": "ROUNDUP(1.1, 0) => 2\nROUNDUP(-1.1, 0) => -2"
    },
    "ROUNDDOWN": {
      "summary": "Округляет значение до количества заданных десятичных мест, определяемых параметром \"precision\", всегда округляя вниз, т.е. к нулю. (Вы должны указать значение для точности, иначе функция не будет работать.)",
      "example": "ROUNDDOWN(1.9, 0) => 1\nROUNDDOWN(-1.9, 0) => -1"
    },
    "CEILING": {
      "summary": "Возвращает ближайшее целое кратное значения \"значимости\", которое больше или равно исходному значению. Если значение \"значимости\" не предоставлено, то предполагается значение 1.",
      "example": "CEILING(2.49) => 3\nCEILING(2.49, 1) => 2.5\nCEILING(2.49, -1) => 10"
    },
    "FLOOR": {
      "summary": "Возвращает ближайшее целое кратное значения \"значимости\", которое меньше или равно исходному значению. Если значение \"значимости\" не предоставлено, то предполагается значение 1.",
      "example": "FLOOR(2.49) => 2\nFLOOR(2.49, 1) => 2.4\nFLOOR(2.49, -1) => 0"
    },
    "EVEN": {
      "summary": "Возвращает наименьшее четное целое число, которое больше или равно указанному значению.",
      "example": "EVEN(0.1) => 2\nEVEN(-0.1) => -2"
    },
    "ODD": {
      "summary": "Округляет положительное значение вверх до ближайшего нечетного числа, а отрицательное значение вниз до ближайшего нечетного числа.",
      "example": "ODD(0.1) => 1\nODD(-0.1) => -1"
    },
    "INT": {
      "summary": "Если логический аргумент истинный, возвращает number1, в противном случае возвращает number2. Также можно использовать для создания вложенных IF-заявлений.\nТакже можно использовать для проверки, пуста ли ячейка/есть ли в ней значение.",
      "example": "INT(1.9) => 1\nINT(-1.9) => -2"
    },
    "ABS": {
      "summary": "Возвращает абсолютное значение.",
      "example": "ABS(-1) => 1"
    },
    "SQRT": {
      "summary": "Возвращает квадратный корень неотрицательного числа.",
      "example": "SQRT(4) => 2"
    },
    "POWER": {
      "summary": "Вычисляет указанную основание в степени, равной заданному значению.",
      "example": "POWER(2) => 4"
    },
    "EXP": {
      "summary": "Вычисляет число Эйлера (e) в степени, равной заданному значению.",
      "example": "EXP(0) => 1\nEXP(1) => 2.718"
    },
    "LOG": {
      "summary": "Вычисляет логарифм значения в заданной основании. Если основа не указана, то по умолчанию используется 10.",
      "example": "LOG(100) => 2\nLOG(1024, 2) => 10"
    },
    "MOD": {
      "summary": "Возвращает остаток от деления первого аргумента на второй.",
      "example": "MOD(9, 2) => 1\nMOD(9, 3) => 0"
    },
    "VALUE": {
      "summary": "Преобразует текстовую строку в число.",
      "example": "VALUE(\"$1,000,000\") => 1000000"
    },
    "CONCATENATE": {
      "summary": "Объединяет различные аргументы типа значения в один текстовый значение.",
      "example": "CONCATENATE(\"Hello \", \"Teable\") => Hello Teable"
    },
    "FIND": {
      "summary": "Находит вхождение строки stringToFind в строке whereToSearch, начиная от необязательного позиции startFromPosition (по умолчанию startFromPosition равно 0). Если вхождение строки stringToFind не найдено, то результат будет 0.",
      "example": "FIND(\"Teable\", \"Hello Teable\") => 7\nFIND(\"Teable\", \"Hello Teable\", 5) => 7\nFIND(\"Teable\", \"Hello Teable\", 10) => 0"
    },
    "SEARCH": {
      "summary": "Ищет вхождение строки stringToFind в строке whereToSearch, начиная от необязательного позиции startFromPosition (по умолчанию startFromPosition равно 0). Если вхождение строки stringToFind не найдено, то результат будет пустой.\n\nЭто похоже на функцию FIND(), хотя если вхождение stringToFind не найдено, FIND() возвращает 0, а не пустое значение.",
      "example": "SEARCH(\"Teable\", \"Hello Teable\") => 7\nSEARCH(\"Teable\", \"Hello Teable\", 5) => 7\nSEARCH(\"Teable\", \"Hello Teable\", 10) => \"\""
    },
    "MID": {
      "summary": "Извлечь строку счисления, начинающуюся с where tostart.",
      "example": "MID(\"Hello Teable\", 6, 6) => \"Teable\""
    },
    "LEFT": {
      "summary": "Извлечь символ howmany из начала строки.",
      "example": "LEFT(\"2023-09-06\", 4) => \"2023\""
    },
    "RIGHT": {
      "summary": "Сколько символов извлекается из конца строки.",
      "example": "RIGHT(\"2023-09-06\", 5) => \"09-06\""
    },
    "REPLACE": {
      "summary": "Заменить текст символом, начинающимся с начального символа.\n(Если вы ищете способ найти все появляющиеся Old text и заменить их новостями text, см. статью SUBSTITUTE ().)",
      "example": "REPLACE(\"Hello Table\", 7, 5, \"Teable\") => \"Hello Teable\""
    },
    "REGEXP_REPLACE": {
      "summary": "Заменить все строки, соответствующие регулярному выражению, на replace.",
      "example": "REGEXP_REPLACE(\"Hello Table\", \"H.* \", \"\") => \"Teable\""
    },
    "SUBSTITUTE": {
      "summary": "Заменить существующий Old text новым text.\nВы можете указать кавычки (начиная с 1) для замены конкретного появления old text. Если кавычки не указаны, все появляющиеся Old text будут заменены.",
      "example": "SUBSTITUTE(\"Hello Table\", \"Table\", \"Teable\") => \"Hello Teable\""
    },
    "LOWER": {
      "summary": "Приводит строку к нижнему регистру.",
      "example": "LOWER(\"Hello Teable\") => \"hello teable\""
    },
    "UPPER": {
      "summary": "Приводит строку к верхнему регистру.",
      "example": "UPPER(\"Hello Teable\") => \"HELLO TEABLE\""
    },
    "REPT": {
      "summary": "Повторяет строку указанное количество раз.",
      "example": "REPT(\"Hello!\") => \"Hello!Hello!Hello!\""
    },
    "TRIM": {
      "summary": "Удаляет пробелы в начале и в конце строки.",
      "example": "TRIM(\" Hello \") => \"Hello\""
    },
    "LEN": {
      "summary": "Извлекает {{howMany}} символов с начала строки.",
      "example": "LEN(\"Hello\") => 5"
    },
    "T": {
      "summary": "Возвращает аргумент, если это текст, иначе возвращает пустое значение.",
      "example": "T(\"Hello\") => \"Hello\"\nT(100) => null"
    },
    "ENCODE_URL_COMPONENT": {
      "summary": "Заменяет определённые символы на закодированные эквиваленты для использования в создании URL или URI. Не кодирует следующие символы: - _. ~",
      "example": "ENCODE_URL_COMPONENT(\"Hello Teable\") => \"Hello%20Teable\""
    },
    "IF": {
      "summary": "Возвращает значение value1, если логическое выражение истинно, в противном случае возвращает значение value2. Также можно использовать для создания вложенных операторов IF. Можно также использовать для проверки, пустая ли ячейка.",
      "example": "IF(2 > 1, \"A\", \"B\") => \"A\"\nIF(2 > 1, TRUE, FALSE) => TRUE"
    },
    "SWITCH": {
      "summary": "Принимает выражение, список возможных значений для этого выражения и соответствующее значение для каждого из них. Также можно задать значение по умолчанию, если введённое выражение не соответствует ни одному из определённых шаблонов. В многих случаях функцию SWITCH() можно использовать вместо вложенной формулы IF().",
      "example": "SWITCH(\"B\", \"A\", \"Value A\", \"B\", \"Value B\", \"Default Value\") => \"Value B\""
    },
    "AND": {
      "summary": "Возвращает true, если все аргументы истинны, иначе возвращает false.",
      "example": "AND(1 < 2, 5 > 3) => true\nAND(1 < 2, 5 < 3) => false"
    },
    "OR": {
      "summary": "Возвращает true, если хотя бы один из аргументов иссинён, иначе возвращает false.",
      "example": "OR(1 < 2, 5 < 3) => true\nOR(1 > 2, 5 < 3) => false"
    },
    "XOR": {
      "summary": "Возвращает true, если нечетное количество аргументов истинно, иначе возвращает false.",
      "example": "XOR(1 < 2, 5 < 3, 8 < 10) => false\nXOR(1 > 2, 5 < 3, 8 < 10) => true"
    },
    "NOT": {
      "summary": "Обращает логическое значение аргумента.",
      "example": "NOT(1 < 2) => false\nNOT(1 > 2) => true"
    },
    "BLANK": {
      "summary": "Возвращает пустое значение.",
      "example": "BLANK() => null\nIF(2 > 3, \"Yes\", BLANK()) => null"
    },
    "ERROR": {
      "summary": "Возвращает значение ошибки.",
      "example": "IF(2 > 3, \"Yes\", ERROR(\"Calculation\")) => \"#ERROR: Calculation\""
    },
    "IS_ERROR": {
      "summary": "Возвращает true, если выражение вызывает ошибку, иначе возвращает false.",
      "example": "IS_ERROR(ERROR()) => true"
    },
    "TODAY": {
      "summary": "Возвращает текущую дату.",
      "example": "TODAY() => \"2023-09-08 00:00\""
    },
    "NOW": {
      "summary": "Returns the current date and time.",
      "example": "NOW() => \"2023-09-08 16:50\""
    },
    "YEAR": {
      "summary": "Returns the four-digit year of a datetime.",
      "example": "YEAR(\"2023-09-08\") => 2023"
    },
    "MONTH": {
      "summary": "Returns the month of a datetime as a number between 1 (January) and 12 (December).",
      "example": "MONTH(\"2023-09-08\") => 9"
    },
    "WEEKNUM": {
      "summary": "Returns the week number in a year.",
      "example": "WEEKNUM(\"2023-09-08\") => 36"
    },
    "WEEKDAY": {
      "summary": "Returns the day of the week as an integer between 0 and 6, inclusive. You may optionally provide a second argument (either \"Sunday\" or \"Monday\") to start weeks on that day. If omitted, weeks start on Sunday by default. Example:\nWEEKDAY(TODAY(), \"Monday\")",
      "example": "WEEKNUM(\"2023-09-08\") => 5"
    },
    "DAY": {
      "summary": "Returns the day of the month of a datetime in the form of a number between 1-31.",
      "example": "DAY(\"2023-09-08\") => 8"
    },
    "HOUR": {
      "summary": "Returns the hour of a datetime as a number between 0 (12:00am) and 23 (11:00pm).",
      "example": "HOUR(\"2023-09-08 16:50\") => 16"
    },
    "MINUTE": {
      "summary": "Returns the minute of a datetime as an integer between 0 and 59.",
      "example": "MINUTE(\"2023-09-08 16:50\") => 50"
    },
    "SECOND": {
      "summary": "Returns the second of a datetime as an integer between 0 and 59.",
      "example": "SECOND(\"2023-09-08 16:50:30\") => 30"
    },
    "FROMNOW": {
      "summary": "Calculates the number of days between the current date and another date.",
      "example": "FROMNOW({Date}, \"day\") => 25"
    },
    "TONOW": {
      "summary": "Calculates the number of days between the current date and another date.",
      "example": "TONOW({Date}, \"day\") => 25"
    },
    "DATETIME_DIFF": {
      "summary": "Returns the difference between datetimes in specified units. Default units are seconds. (See list of unit specifiers here.)\nThe difference between datetimes is determined by subtracting [date2] from [date1]. This means that if [date2] is later than [date1], the resulting value will be negative.",
      "example": "DATETIME_DIFF(\"2022-08-01\", \"2023-09-08\", \"day\") => 403"
    },
    "WORKDAY": {
      "summary": "Returns the workday to the start date, excluding the specified holidays",
      "example": "WORKDAY(\"2023-09-08\", 200) => \"2024-06-14 00:00:00\"\nWORKDAY(\"2023-09-08\", 200, \"2024-01-22, 2024-01-23, 2024-01-24, 2024-01-25\") => \"2024-06-20 00:00:00\""
    },
    "WORKDAY_DIFF": {
      "summary": "Returns the number of working days between date1 and date2. Working days exclude weekends and an optional list of holidays, formatted as a comma-separated string of ISO-formatted dates.",
      "example": "WORKDAY_DIFF(\"2023-06-18\", \"2023-10-01\") => 75\nWORKDAY(\"2023-06-18\", \"2023-10-01\", \"2023-07-12, 2023-08-18, 2023-08-19\") => 73"
    },
    "IS_SAME": {
      "summary": "Compares two dates up to a unit and determines whether they are identical. Returns true if yes, false if no.",
      "example": "IS_SAME(\"2023-09-08\", \"2023-09-10\") => false\nIS_SAME(\"2023-09-08\", \"2023-09-10\", \"month\") => true"
    },
    "IS_AFTER": {
      "summary": "Determines if date1 is later than date2. Returns true if yes, false if no.",
      "example": "IS_AFTER(\"2023-09-10\", \"2023-09-08\") => true\nIS_AFTER(\"2023-09-10\", \"2023-09-08\", \"month\") => false"
    },
    "IS_BEFORE": {
      "summary": "Determines if date1 is earlier than date2. Returns true if yes, false if no.",
      "example": "IS_BEFORE(\"2023-09-08\", \"2023-09-10\") => true\nIS_BEFORE(\"2023-09-08\", \"2023-09-10\", \"month\") => false"
    },
    "DATE_ADD": {
      "summary": "Adds specified \"count\" units to a datetime.",
      "example": "DATE_ADD(\"2023-09-08 18:00:00\", 10, \"day\") => \"2023-09-18 18:00:00\""
    },
    "DATESTR": {
      "summary": "Formats a datetime into a string (YYYY-MM-DD).",
      "example": "DATESTR(\"2023/09/08\") => \"2023-09-08\""
    },
    "TIMESTR": {
      "summary": "Formats a datetime into a time-only string (HH:mm:ss).",
      "example": "DATESTR(\"2023/09/08 16:50:30\") => \"16:50:30\""
    },
    "DATETIME_FORMAT": {
      "summary": "Formats a datetime into a specified string. For an explanation of how to use this function with date fields, click here. For a list of supported format specifiers, please click here.",
      "example": "DATETIME_FORMAT(\"2023-09-08\", \"DD-MM-YYYY\") => \"08-09-2023\""
    },
    "DATETIME_PARSE": {
      "summary": "Interprets a text string as a structured date, with optional input format and locale parameters. The output format will always be formatted \"M/D/YYYY h:mm a\".",
      "example": "DATETIME_PARSE(\"8 Sep 2023 18:00\", \"D MMM YYYY HH:mm\") => \"2023-09-08 18:00:00\""
    },
    "CREATED_TIME": {
      "summary": "Returns the creation time of the current record.",
      "example": "CREATED_TIME() => \"2023-09-08 18:00:00\""
    },
    "LAST_MODIFIED_TIME": {
      "summary": "Returns the date and time of the most recent modification made by a user in a non-computed field in the table.",
      "example": "LAST_MODIFIED_TIME() => \"2023-09-08 18:00:00\""
    },
    "COUNTALL": {
      "summary": "Returns the number of all elements including text and blanks.",
      "example": "COUNTALL(100, 200, \"\", \"Teable\", TRUE()) => 5"
    },
    "COUNTA": {
      "summary": "Returns the number of non-empty values. This function counts both numeric and text values.",
      "example": "COUNTA(100, 200, 300, \"\", \"Teable\", TRUE) => 4"
    },
    "COUNT": {
      "summary": "Returns the number of numeric items.",
      "example": "COUNT(100, 200, 300, \"\", \"Teable\", TRUE) => 3"
    },
    "ARRAY_JOIN": {
      "summary": "Join the array of rollup items into a string with a separator.",
      "example": "ARRAY_JOIN([\"Tom\", \"Jerry\", \"Mike\"], \"; \") => \"Tom; Jerry; Mike\""
    },
    "ARRAY_UNIQUE": {
      "summary": "Returns only unique items in the array.",
      "example": "ARRAY_UNIQUE([1, 2, 3, 2, 1]) => [1, 2, 3]"
    },
    "ARRAY_FLATTEN": {
      "summary": "Flattens the array by removing any array nesting. All items become elements of a single array.",
      "example": "ARRAY_FLATTEN([1, 2, \" \", 3, true], [\"ABC\"]) => [1, 2, 3, \" \", true, \"ABC\"]"
    },
    "ARRAY_COMPACT": {
      "summary": "Removes empty strings and null values from the array. Keeps \"false\" and strings that contain one or more blank characters.",
      "example": "ARRAY_COMPACT([1, 2, 3, \"\", null, \"ABC\"]) => [1, 2, 3, \"ABC\"]"
    },
    "TEXT_ALL": {
      "summary": "Returns all text values",
      "example": "TEXT_ALL(\"t\") => t"
    },
    "RECORD_ID": {
      "summary": "Returns the ID of the current record.",
      "example": "RECORD_ID() => \"recxxxxxx\""
    },
    "AUTO_NUMBER": {
      "summary": "Returns the unique and incremented numbers for each record.",
      "example": "AUTO_NUMBER() => 1"
    },
    "FORMULA": {
      "summary": "Fill in variables, operational characters, and functions to form formulas for calculations.",
      "example": "Quoting the Column: {Field name}\n\nUsing operator: 100 * 2 + 300\n\nUsing function: SUM({Number Field 1}, 100)\n\nUsing IF statement: \nIF(logical condition, \"value 1\", \"value 2\")"
    }
  },
  "functionType": {
    "fields": "Fields",
    "numeric": "Numeric",
    "text": "Text",
    "logical": "Logical",
    "date": "Date",
    "array": "Array",
    "system": "System"
  },
  "statisticFunc": {
    "none": "None",
    "empty": "Empty",
    "filled": "Filled",
    "unique": "Unique",
    "max": "Max",
    "min": "Min",
    "sum": "Sum",
    "average": "Average",
    "checked": "Checked",
    "unChecked": "Unchecked",
    "percentEmpty": "Percent Empty",
    "percentFilled": "Percent Filled",
    "percentUnique": "Percent Unique",
    "percentChecked": "Percent Checked",
    "percentUnChecked": "Percent Unchecked",
    "earliestDate": "Earliest Date",
    "latestDate": "Latest Date",
    "dateRangeOfDays": "Date Range (days)",
    "dateRangeOfMonths": "Date Range (months)",
    "totalAttachmentSize": "Total Attachment Size"
  },
  "baseQuery": {
    "add": "Add",
    "error": {
      "invalidCol": "Invalid column, please reselect",
      "invalidCols": "Invalid columns: {{colNames}}",
      "invalidTable": "Invalid table, please reselect",
      "requiredSelect": "You must select one"
    },
    "from": {
      "title": "From",
      "fromTable": "Select Table",
      "fromQuery": "From Query"
    },
    "select": {
      "title": "Select"
    },
    "where": {
      "title": "Where"
    },
    "groupBy": {
      "title": "Group By"
    },
    "orderBy": {
      "title": "Order By",
      "asc": "Ascending",
      "desc": "Descending"
    },
    "limit": {
      "title": "Limit"
    },
    "offset": {
      "title": "Offset"
    },
    "join": {
      "title": "Join",
      "joinType": "Join Type",
      "leftJoin": "Left Join",
      "rightJoin": "Right Join",
      "innerJoin": "Inner Join",
      "fullJoin": "Full Join",
      "data": "From"
    },
    "aggregation": {
      "title": "Aggregation"
    }
  }
}
